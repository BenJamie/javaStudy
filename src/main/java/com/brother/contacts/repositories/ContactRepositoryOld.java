package com.brother.contacts.repositories;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;


import com.brother.contacts.entities.Contact;

public class ContactRepositoryOld {

	private final DataSource ds;

	public ContactRepositoryOld() {
		try {
			Context context = new InitialContext();
			try {
				ds = (DataSource) context.lookup("java:comp/env/jdbc/trainingdb");
			} finally {
				context.close();
			}
		} catch (NamingException e) {
			throw new RuntimeException();
		}
	}

	public void init() throws SQLException {
		String sql = "create table contact ( " + "id integer generated by default as identity primary key, "
				+ "name varchar(30), " + "addressId varchar(30))";

		Connection connection = ds.getConnection();
		try {
			Statement statement = connection.createStatement();
			try {
				statement.execute(sql);

			} finally {
				statement.close();
			}
		} finally {
			connection.close();
		}
	}

	public Contact find(Long id) throws SQLException {
		String sql = "select * from contact where id = " + id;

		Connection connection = ds.getConnection();
		try {
			Statement statement = connection.createStatement();
			try {
				ResultSet result1 = statement.executeQuery(sql);
				try {
					if (!result1.next())
						return null;
					else {
						return getContact(result1);
					}
				} finally {
					result1.close();
				}

			} finally {
				statement.close();
			}

		} finally {
			connection.close();
		}
	}

	public List<Contact> findAll() throws SQLException {
		String sql = "select * from contact";
		List<Contact> contacts = new ArrayList<Contact>();
		Contact contact = new Contact();

		Connection connection = ds.getConnection();
		try {
			Statement statement = connection.createStatement();

			try {
				ResultSet resultSet = statement.executeQuery(sql);
				try {
					while (resultSet.next()) {
						contacts.add(getContact(resultSet));
					}
					return contacts;
					/*for (Contact cont1: contacts) {
						System.out.println(cont1.getName());
					}*/

				} finally {
					resultSet.close();
				}

			} finally {
				statement.close();
			}
		} finally {
			connection.close();
		}
	}

	private Contact getContact(ResultSet resultSet) throws SQLException {
		Contact contact = new Contact();
		contact.setId(resultSet.getLong("id"));
		contact.setName(resultSet.getString("name"));
		contact.setAddressId(resultSet.getLong("addressId"));
		return contact;
	}

	public void create(Contact contact) throws SQLException {
		String sql = "insert into contact (name, addressId) values ('" + contact.getName() + "', '"
				+ contact.getAddressId() + "')";

		Connection connection = ds.getConnection();
		try {
			Statement statement = connection.createStatement();
			try {
				statement.executeUpdate(sql, Statement.RETURN_GENERATED_KEYS);
				ResultSet generatedKeys = statement.getGeneratedKeys();
				try {
					while (generatedKeys.next())
						contact.setId(generatedKeys.getLong("id"));

				} finally {
					generatedKeys.close();
				}

			} finally {
				statement.close();
			}

		} finally {
			connection.close();
		}

	}

	public void update(Contact contact) throws SQLException {
		String sql = "update contact set name = '" + contact.getName() + "', addressId = '" + contact.getAddressId()
				+ "'" + " where id = '" + contact.getId() + "'";
		Connection connection = ds.getConnection();
		try {
			Statement statement = connection.createStatement();
			try {
				statement.executeUpdate(sql, Statement.RETURN_GENERATED_KEYS);
				ResultSet generatedKeys = statement.getGeneratedKeys();
				try {
					if (generatedKeys.next())
						contact.setId(generatedKeys.getLong("id"));
				} finally {
					generatedKeys.close();
				}
			} finally {
				statement.close();
			}

		} finally {
			connection.close();
		}

	}

	public void delete(Contact contact) throws SQLException {
		// TODO confirm the deletion method sequence
		String sql = "delete contact where id = '" + contact.getId() + "'";
		Connection connection = ds.getConnection();
		try {
			Statement statement = connection.createStatement();
			try {
				statement.executeUpdate(sql);
				ResultSet generatedKeys = statement.getGeneratedKeys();
				try {
					if (generatedKeys.next())
						contact.setId(generatedKeys.getLong("id"));
				} finally {
					generatedKeys.close();
				}

			} finally {
				statement.close();
			}

		} finally {
			connection.close();
		}

	}

}
