package com.brother.contacts.repositories;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.persistence.EntityManager;
import javax.persistence.Persistence;
import javax.sql.DataSource;

import com.brother.contacts.entities.Address;

public class AddressRepository {

//	private final DataSource ds;
    	
    	private final EntityManager em = Persistence.createEntityManagerFactory("training").createEntityManager();
    	
/* Using a JPA not need this constructor	
 * public AddressRepository() {
		try {
			Context context = new InitialContext();
			try {
				ds = (DataSource) context.lookup("java:comp/env/jdbc/trainingdb");
			} finally {
				context.close();
			}
		} catch (NamingException e) {
			throw new RuntimeException(e);
		}
	}*/

/*	don't need the initiazater 
 * 	public void init() throws SQLException {
		String sql = "create table address ( " + "id integer generated by default as identity primary key, "
				+ "street varchar(255), " + "city varchar(255), " + "state varchar(10), " + "zip varchar(10))";
		Connection connection = ds.getConnection();
		try {
			Statement statement = connection.createStatement();
			try {
				statement.execute(sql);

			} finally {
				statement.close();
			}
		} finally {
			connection.close();
		}
	}*/

	public Address find(long id) {
	    
		/*##########################################################################
		 * 
		 * Connection connection = ds.getConnection();
		try {
			Statement statement = connection.createStatement();
			try {
				ResultSet results = statement.executeQuery("select * from address where id = " + id);
				try {
					if (!results.next())
						return null;
					else {
						return unmarshall(results);
					}
				} finally {
					results.close();
				}
			} finally {
				statement.close();
			}

		} finally {
			connection.close();
			
		}*********************************************************************************/
	    
	    return em.find(Address.class, id);
	}
	
	public void save(Address address){
	    em.merge(address);
	}
	
	public void delete(Address address){
	    em.remove(address);
	}

	public List<Address> findAll() throws SQLException {
		Connection connection = ds.getConnection();
		List<Address> addresses = new ArrayList<Address>();
		try {
			Statement statement = connection.createStatement();
			try {
				ResultSet results = statement.executeQuery("select * from address");
				try {
					while (results.next()) {
						addresses.add(unmarshall(results));
					}

					return addresses;

				} finally {
					results.close();
				}
			} finally {
				statement.close();
			}

		} finally {
			connection.close();
		}
	}

	private Address unmarshall(ResultSet results) throws SQLException {
		Address address = new Address();
		address.setId(results.getLong("id"));
		address.setStreet(results.getString("street"));
		address.setCity(results.getString("city"));
		address.setState(results.getString("state"));
		address.setZip(results.getString("zip"));
		return address;
	}

	/*private List<Address> showAddressList(ResultSet results) throws SQLException {
		List<Address> addresses = new ArrayList<Address>();
		Address address = new Address();

		while (results.next()) {

			address.setId(results.getLong("id"));
			address.setStreet(results.getString("street"));
			address.setCity(results.getString("city"));
			address.setState(results.getString("state"));
			address.setZip(results.getString("zip"));

			addresses.add(address);

		}
		return addresses;
	}*/

	public void create(Address address) throws SQLException {
		Connection connection = ds.getConnection();
		try {
			Statement statement = connection.createStatement();
			try {
				statement.executeUpdate(
						"insert into address (street, city, state, zip) values ('" + address.getStreet() + "', '"
								+ address.getCity() + "', '" + address.getState() + "', '" + address.getZip() + "')",
						Statement.RETURN_GENERATED_KEYS);
				ResultSet generatedkeys = statement.getGeneratedKeys();
				try {
					if (generatedkeys.next())
						address.setId(generatedkeys.getLong("id"));
				} finally {
					generatedkeys.close();
				}
			} finally {
				statement.close();
			}
		} finally {
			connection.close();
		}
	}

	public void update(Address address) throws SQLException {
		Connection connection = ds.getConnection();
		try {
			Statement statement = connection.createStatement();
			try {
				statement.executeUpdate("update address set street='" + address.getStreet() + "', city='"
						+ address.getCity() + "', state='" + address.getState() + "', zip='" + address.getZip() + "' "
						+ " where id='" + address.getId() + "'", Statement.RETURN_GENERATED_KEYS);
				ResultSet generatedkeys = statement.getGeneratedKeys();
				try {
					if (generatedkeys.next())
						address.setId(generatedkeys.getLong("id"));
				} finally {
					generatedkeys.close();
				}
			} finally {
				statement.close();
			}
		} finally {
			connection.close();
		}

	}

/*	
 * **********************************************************************************************
 * public void delete(Address address) throws SQLException {
		Connection connection = ds.getConnection();
		try {
			Statement statement = connection.createStatement();
			try {
				statement.executeUpdate("delete address where id ='" + address.getId() + "'",
						Statement.RETURN_GENERATED_KEYS);
				ResultSet generatedkeys = statement.getGeneratedKeys();
				try {
					if (generatedkeys.next())
						address.setId(generatedkeys.getLong("id"));
				} finally {
					generatedkeys.close();
				}
			} finally {
				statement.close();
			}
		} finally {
			connection.close();
		}

	}*********************************************************************************/

}
